

%%  constraints

load('mShiftConstraint.mat')

saturdayArray = int16([2:7:30]);
sundayArray = int16([3:7:30]);

longWeekendCellArray = {[2    3    4]    [9   10   11]   [16   17   18]   [23   24   25]};

mondayArray = int16([1:7:30]);
fridayArray = int16([4:7:30]);

requiredShiftArray = int16([...
5
4
3
5
5
4
2
2
    ])
requiredMonFri = int16([...
1
1
1
1
2
1
1
1
])
requiredWeekendDay=int16([...
1
1
1
2
1
1
1
1
])

maxMonFri = int16([...
2
2
2
2
2
2
2
2
])

maxWeekendDay=int16([...
2
2
2
2
2
2
2
2
])
%% stack, txt file initialization
mShiftConstraint= int16(mShiftConstraint);

[nDoctor nDay] = size(mShiftConstraint);
[mTmpShift,] = int16(meshgrid(1:nDay,1:nDoctor));

fid = fopen( 'shiftSolution.txt', 'wt' );
fprintf(fid,'Ügyeleti beosztás opciók: \n\n');

tueWenThuArray = find(~ismember(1:nDay,[saturdayArray sundayArray mondayArray fridayArray]));

iDay=int16(1);
shiftStruct.day = iDay;
shiftStruct.doctorMatrix = mShiftConstraint;
shiftStruct.requiredShiftArray = requiredShiftArray;

shiftStructStack = {shiftStruct};
leafCounter = 0;
iSolution=0;
%% loop
while (~isempty(shiftStructStack))
    
    shiftStructNode1 = shiftStructStack{end};
    shiftStructStack(end)= [];
    
    nonZeroArray = find(shiftStructNode1.requiredShiftArray);
%     nonZeroArray = nonZeroArray(randperm(length(nonZeroArray))); % randomly sort elements of nonZeroArray in order to enhance random distribution of solutions over script runs
    
    iDay = shiftStructNode1.day;

    %% checking constraints at the end of the tree
    if iDay > nDay  
        leafCounter = leafCounter + 1;
        passed = false;
        
        monFriShiftArray = sum(ismember(mTmpShift.*shiftStructNode1.doctorMatrix,[mondayArray fridayArray]),2);
        if prod(monFriShiftArray >= requiredMonFri)==1 % minimum 1 shifts on monday or friday
            passed = true;
        else
            passed = false;
            continue
        end
        
%         freeWeekendArray = zeros(nDoctor,1);
%         for i=1:length(longWeekendCellArray)
%             weekendShiftArray = sum(ismember(mTmpShift.*shiftStructNode1.doctorMatrix,longWeekendCellArray{i}),2);
%             freeWeekendArray=(weekendShiftArray==0)+freeWeekendArray;
%         end
%         if  prod(freeWeekendArray >= 2)==1
%             passed = true;
%         else
%             passed = false;
%             continue
%         end
        
        engagedWeekendDayArray = sum(ismember(mTmpShift.*shiftStructNode1.doctorMatrix,[saturdayArray sundayArray]),2);
        if prod(engagedWeekendDayArray >= requiredWeekendDay)==1;
            passed=1;
        else
            passed=0;
            continue
        end
        
        
        if passed==true
            iSolution=iSolution+1
            for ii = 1:size(shiftStructNode1.doctorMatrix,1)
                fprintf(fid,'%d\t',shiftStructNode1.doctorMatrix(ii,:));
                fprintf(fid,'\n');
            end
            fprintf(fid,'%d\n',iSolution);
            continue
        end
    end
    
    %% This section decreases the number of branches to be visited by regularly ckecking some of the constraints (every 2nd day)
    passed = true;
    if mod(iDay,2)==1
        tmpShiftIntMatrix = int16(shiftStructNode1.doctorMatrix==1);
        freeWeekendArray = zeros(nDoctor,1);
        for i=1:length(longWeekendCellArray)
            weekendShiftArray = sum(ismember((mTmpShift.*tmpShiftIntMatrix),longWeekendCellArray{i}),2);
            freeWeekendArray=(weekendShiftArray==0)+freeWeekendArray;
        end
        if  prod(freeWeekendArray >= 2)==1
            passed = true;
        else
            passed = false;
            continue
        end
        
        tueWenThuShiftArray = int16(sum(ismember(mTmpShift.*tmpShiftIntMatrix,tueWenThuArray),2));
        if  prod(requiredShiftArray < requiredMonFri + requiredWeekendDay + tueWenThuShiftArray)==1 % minimum 1 shifts on monday or friday
            passed = false;
            continue
        end
        
        monFriShiftArray = sum(ismember(mTmpShift.*shiftStructNode1.doctorMatrix,[mondayArray fridayArray]),2);
        if sum(monFriShiftArray > maxMonFri)>1 % checking maximum number of shifts on monday or friday checking
            passed = false;
            continue
        end
        
        engagedWeekendDayArray = sum(ismember(mTmpShift.*shiftStructNode1.doctorMatrix,[saturdayArray sundayArray]),2);
        if sum(engagedWeekendDayArray > maxWeekendDay)>1; % checking maximum number of shifts on weekends
            passed = false;
            continue
        end
        
    end
    
    %% pushing nodes into the stack if the previous conditions are fullfilled
    
    if passed==true
        for i=1:length(nonZeroArray)
            
            switch shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay)
                
                case -1
                    shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay) = 0;
                    continue
                    
                case 2 % the one who wants to have the shift takes it
                    shiftStructStack = stepNode(shiftStructStack,shiftStructNode1,nonZeroArray,iDay,i);
                    break
                    
                case 0    % aka the doctor is available on the given day
                    if iDay > 1 & iDay < nDay
                        if (shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay-1) ~= 1) & (shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay+1) ~= 2)
                            shiftStructStack = stepNode(shiftStructStack,shiftStructNode1,nonZeroArray,iDay,i);
                        else
                            continue
                        end
                    end
                    if iDay == 1
                        if (shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay+1) ~= 2)
                            shiftStructStack = stepNode(shiftStructStack,shiftStructNode1,nonZeroArray,iDay,i);
                        else
                            continue
                        end
                    end
                    
                    if iDay == nDay
                        if (shiftStructNode1.doctorMatrix(nonZeroArray(i),iDay-1) ~= 1)
                            shiftStructStack = stepNode(shiftStructStack,shiftStructNode1,nonZeroArray,iDay,i);
                        else
                            continue
                        end
                    end
            end
        end
    end
end
if iSolution==0
    fprintf(fid,'NINCS MEGOLDÁS');
end
fclose(fid)

%% functions
function shiftStructStack = stepNode(shiftStructNodeStc,shiftStructNodeTmp,nonZeroArray,iDay,iDoctor)
shiftStructNodeTmp.requiredShiftArray(nonZeroArray(iDoctor))= shiftStructNodeTmp.requiredShiftArray(nonZeroArray(iDoctor))-1;
shiftStructNodeTmp.doctorMatrix(:,iDay) = 0;
shiftStructNodeTmp.doctorMatrix(nonZeroArray(iDoctor),iDay) = 1;
shiftStructNodeTmp.day = iDay + 1;
shiftStructStack = {shiftStructNodeStc{:} shiftStructNodeTmp};
end